#!/usr/bin/env python3
import argparse
import pickle
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import tqdm

import force_push as fp

import IPython


def main():
    np.set_printoptions(precision=6, suppress=True)

    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="NPZ file to load data from.")
    parser.add_argument("--save", action="store_true", help="Save the results.")
    args = parser.parse_args()

    input_path = Path(args.file)
    with open(input_path, "rb") as f:
        data = pickle.load(f)
    print(f"Loaded data from {args.file}")

    # check if we've already computed the needed results (i.e., the file has
    # been previously generated by this script); if not, compute them
    if "ideal_final_pos" not in data:
        results = fp.compute_simulation_extreme_points(data)
        data.update(results)

    if args.save:
        output_path = Path(input_path.stem + "_results.pkl")
        with open(output_path, "wb") as f:
            pickle.dump(data, f)
        print(f"Saved processed data to {output_path}")

    fp.plot_simulation_results(data)

    max_final_info = data["max_final_info"]
    max_deviation_info = data["max_deviation_info"]
    print(f"Max final dist was {max_final_info.distance} in run {max_final_info.index}")
    print(f"Max deviation was {max_deviation_info.distance} in run {max_deviation_info.index}")

    completion_fractions = data["completion_fractions"]
    mean_frac = np.mean(completion_fractions)
    std_frac = np.std(completion_fractions)
    print("\nCompletion")
    print(f"mean  = {mean_frac}")
    print(f"std   = {std_frac}")
    print(f"best  = {np.max(completion_fractions)}")
    print(f"worst = {np.min(completion_fractions)}")

    plt.plot(
        [max_final_info.point[0]],
        [max_final_info.point[1]],
        "x",
        color="k",
        label="Max final dist",
    )
    plt.plot(
        [max_deviation_info.point[0]],
        [max_deviation_info.point[1]],
        "o",
        color="k",
        label="Max deviation",
    )
    plt.legend()

    plt.show()


if __name__ == "__main__":
    main()
